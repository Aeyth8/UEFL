# Reference: https://build-cpp.github.io/cmkr/cmake-toml
# to build:
# > cmake -B build
# > cmake --build build --config Release
[project]
name = "ue4poc-proj"
cmake-before=""" 
add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)
"""
cmake-after = """
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
    message(NOTICE "Building in Release mode")
endif()
"""

[target.spdlog]
type = "static"
sources = ["dependencies/submodules/spdlog/src/*.cpp"]
include-directories = ["dependencies/submodules/spdlog/include"]
compile-definitions = ["SPDLOG_COMPILED_LIB"]

[target.glm_static]
type = "static"
sources = ["dependencies/submodules/glm/glm/**.cpp"]
include-directories = ["dependencies/submodules/glm"]

[fetch-content.bddisasm]
git = "https://github.com/bitdefender/bddisasm"
tag = "v1.34.10"

[fetch-content.safetyhook]
git = "https://github.com/cursey/safetyhook"
tag = "e175896c67abf49360acafe8879205a138fe6b2b"

[fetch-content.openxr]
git = "https://github.com/KhronosGroup/OpenXR-SDK"
tag = "458984d7f59d1ae6dc1b597d94b02e4f7132eaba"

[fetch-content.json]
git = "https://github.com/nlohmann/json"
tag = "bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d"

[target.openvr]
type = "interface"
include-directories = ["dependencies/openvr/headers"]
link-libraries = [
    "${CMAKE_SOURCE_DIR}/dependencies/openvr/lib/win64/openvr_api.lib",
]
cmake-after = """
file(COPY dependencies/openvr/lib/win64/openvr_api.lib DESTINATION ${CMAKE_BINARY_DIR}/lib)
file(COPY dependencies/openvr/bin/win64/openvr_api.dll DESTINATION ${CMAKE_BINARY_DIR}/bin)
"""

[target.imgui]
type = "static"
sources = ["dependencies/submodules/imgui/*.cpp"]
include-directories = ["dependencies/submodules/imgui", "src/ue4poc-imgui"]
compile-definitions = [
    "IMGUI_USER_CONFIG=\"${CMAKE_SOURCE_DIR}/src/ue4poc-imgui/ue4poc_imconfig.hpp\"",
]

[target.utility]
type = "static"
sources = ["shared/utility/**.cpp", "shared/utility/**.c"]
headers = ["shared/utility/**.hpp", "shared/utility/**.h"]
compile-options = ["/EHa", "/MP"]
compile-features = ["cxx_std_20"]
link-libraries = [
    "spdlog",
    "bddisasm"
]

[target.ue4poc]
type = "shared"
sources = ["src/**.cpp", "src/**.c"]
headers = ["src/**.hpp", "src/**.h"]
include-directories = [
    "shared/", 
    "src/", 
    "include/", 
    "dependencies/enetpp/include", 
    "${OPENXR_SOURCE_DIR}/src"
]
compile-options = ["/GS-", "/bigobj", "/EHa", "/MP"]
compile-features = ["cxx_std_20"]
compile-definitions = ["_WINSOCKAPI_"]
link-libraries = [
    "utility",
    "shlwapi",
    "d3d11",
    "d3d12",
    "safetyhook",
    "winhttp",
    "glm_static",
    "bddisasm",
    "imgui",
    "openvr",
    "openxr_loader",
    "nlohmann_json"
]

[target.ue4poc.properties]
OUTPUT_NAME = "dinput8"
LINK_FLAGS = "/DELAYLOAD:openvr_api.dll /DELAYLOAD:openxr_loader.dll"
RUNTIME_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELEASE = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO = "${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"

