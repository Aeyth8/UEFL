# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

 
add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

project(ue4poc-proj)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
    message(NOTICE "Building in Release mode")
endif()

include(FetchContent)

message(STATUS "Fetching bddisasm (v1.34.10)...")
FetchContent_Declare(bddisasm
	GIT_REPOSITORY
		"https://github.com/bitdefender/bddisasm"
	GIT_TAG
		v1.34.10
)
FetchContent_MakeAvailable(bddisasm)

message(STATUS "Fetching safetyhook (e175896c67abf49360acafe8879205a138fe6b2b)...")
FetchContent_Declare(safetyhook
	GIT_REPOSITORY
		"https://github.com/cursey/safetyhook"
	GIT_TAG
		e175896c67abf49360acafe8879205a138fe6b2b
)
FetchContent_MakeAvailable(safetyhook)

# Target spdlog
set(CMKR_TARGET spdlog)
set(spdlog_SOURCES "")

list(APPEND spdlog_SOURCES
	"dependencies/submodules/spdlog/src/async.cpp"
	"dependencies/submodules/spdlog/src/cfg.cpp"
	"dependencies/submodules/spdlog/src/color_sinks.cpp"
	"dependencies/submodules/spdlog/src/file_sinks.cpp"
	"dependencies/submodules/spdlog/src/fmt.cpp"
	"dependencies/submodules/spdlog/src/spdlog.cpp"
	"dependencies/submodules/spdlog/src/stdout_sinks.cpp"
)

list(APPEND spdlog_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${spdlog_SOURCES})
add_library(spdlog STATIC)

if(spdlog_SOURCES)
	target_sources(spdlog PRIVATE ${spdlog_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${spdlog_SOURCES})

target_compile_definitions(spdlog PUBLIC
	SPDLOG_COMPILED_LIB
)

target_include_directories(spdlog PUBLIC
	"dependencies/submodules/spdlog/include"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target glm_static
set(CMKR_TARGET glm_static)
set(glm_static_SOURCES "")

list(APPEND glm_static_SOURCES
	"dependencies/submodules/glm/glm/detail/glm.cpp"
)

list(APPEND glm_static_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${glm_static_SOURCES})
add_library(glm_static STATIC)

if(glm_static_SOURCES)
	target_sources(glm_static PRIVATE ${glm_static_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${glm_static_SOURCES})

target_include_directories(glm_static PUBLIC
	"dependencies/submodules/glm"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target utility
set(CMKR_TARGET utility)
set(utility_SOURCES "")

list(APPEND utility_SOURCES
	"shared/utility/Address.cpp"
	"shared/utility/Config.cpp"
	"shared/utility/Input.cpp"
	"shared/utility/Memory.cpp"
	"shared/utility/Module.cpp"
	"shared/utility/Patch.cpp"
	"shared/utility/Pattern.cpp"
	"shared/utility/PointerHook.cpp"
	"shared/utility/RTTI.cpp"
	"shared/utility/Registry.cpp"
	"shared/utility/Scan.cpp"
	"shared/utility/String.cpp"
	"shared/utility/Thread.cpp"
	"shared/utility/VtableHook.cpp"
	"shared/utility/Address.hpp"
	"shared/utility/Config.hpp"
	"shared/utility/Input.hpp"
	"shared/utility/Memory.hpp"
	"shared/utility/Module.hpp"
	"shared/utility/Patch.hpp"
	"shared/utility/Pattern.hpp"
	"shared/utility/PointerHook.hpp"
	"shared/utility/RTTI.hpp"
	"shared/utility/Registry.hpp"
	"shared/utility/Scan.hpp"
	"shared/utility/String.hpp"
	"shared/utility/Thread.hpp"
	"shared/utility/VtableHook.hpp"
)

list(APPEND utility_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${utility_SOURCES})
add_library(utility STATIC)

if(utility_SOURCES)
	target_sources(utility PRIVATE ${utility_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${utility_SOURCES})

target_compile_features(utility PUBLIC
	cxx_std_20
)

target_compile_options(utility PUBLIC
	"/EHa"
	"/MP"
)

target_link_libraries(utility PUBLIC
	spdlog
	bddisasm
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target ue4poc
set(CMKR_TARGET ue4poc)
set(ue4poc_SOURCES "")

list(APPEND ue4poc_SOURCES
	"src/FFakeStereoRenderingHook.cpp"
	"src/Main.cpp"
	"src/FFakeStereoRenderingHook.hpp"
	"src/Math.hpp"
	"src/StereoStuff.hpp"
)

list(APPEND ue4poc_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${ue4poc_SOURCES})
add_library(ue4poc SHARED)

if(ue4poc_SOURCES)
	target_sources(ue4poc PRIVATE ${ue4poc_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${ue4poc_SOURCES})

target_compile_definitions(ue4poc PUBLIC
	_WINSOCKAPI_
)

target_compile_features(ue4poc PUBLIC
	cxx_std_20
)

target_compile_options(ue4poc PUBLIC
	"/GS-"
	"/bigobj"
	"/EHa"
	"/MP"
)

target_include_directories(ue4poc PUBLIC
	"shared/"
	"src/"
	"include/"
	"dependencies/enetpp/include"
	"dependencies/nlohmann"
)

target_link_libraries(ue4poc PUBLIC
	utility
	shlwapi
	d3d11
	d3d12
	safetyhook
	winhttp
	glm_static
	bddisasm
)

set_target_properties(ue4poc PROPERTIES
	OUTPUT_NAME
		dinput8
	RUNTIME_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
	RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
	LIBRARY_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	ARCHIVE_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

