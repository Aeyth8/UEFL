# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

 
add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

project(ue4poc-proj)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
    message(NOTICE "Building in Release mode")
endif()

include(FetchContent)

message(STATUS "Fetching bddisasm (v1.34.10)...")
FetchContent_Declare(bddisasm
	GIT_REPOSITORY
		"https://github.com/bitdefender/bddisasm"
	GIT_TAG
		v1.34.10
)
FetchContent_MakeAvailable(bddisasm)

message(STATUS "Fetching kananlib (main)...")
FetchContent_Declare(kananlib
	GIT_REPOSITORY
		"https://github.com/cursey/kananlib"
	GIT_TAG
		main
)
FetchContent_MakeAvailable(kananlib)

message(STATUS "Fetching safetyhook (e175896c67abf49360acafe8879205a138fe6b2b)...")
FetchContent_Declare(safetyhook
	GIT_REPOSITORY
		"https://github.com/cursey/safetyhook"
	GIT_TAG
		e175896c67abf49360acafe8879205a138fe6b2b
)
FetchContent_MakeAvailable(safetyhook)

message(STATUS "Fetching openxr (458984d7f59d1ae6dc1b597d94b02e4f7132eaba)...")
FetchContent_Declare(openxr
	GIT_REPOSITORY
		"https://github.com/KhronosGroup/OpenXR-SDK"
	GIT_TAG
		458984d7f59d1ae6dc1b597d94b02e4f7132eaba
)
FetchContent_MakeAvailable(openxr)

message(STATUS "Fetching json (bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d)...")
FetchContent_Declare(json
	GIT_REPOSITORY
		"https://github.com/nlohmann/json"
	GIT_TAG
		bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d
)
FetchContent_MakeAvailable(json)

message(STATUS "Fetching asmjit (2a706fd2ba355808cada31ac1eed8ce28caa6b37)...")
FetchContent_Declare(asmjit
	GIT_REPOSITORY
		"https://github.com/asmjit/asmjit.git"
	GIT_TAG
		2a706fd2ba355808cada31ac1eed8ce28caa6b37
)
FetchContent_MakeAvailable(asmjit)

# Target spdlog
set(CMKR_TARGET spdlog)
set(spdlog_SOURCES "")

list(APPEND spdlog_SOURCES
	"dependencies/submodules/spdlog/src/async.cpp"
	"dependencies/submodules/spdlog/src/cfg.cpp"
	"dependencies/submodules/spdlog/src/color_sinks.cpp"
	"dependencies/submodules/spdlog/src/file_sinks.cpp"
	"dependencies/submodules/spdlog/src/fmt.cpp"
	"dependencies/submodules/spdlog/src/spdlog.cpp"
	"dependencies/submodules/spdlog/src/stdout_sinks.cpp"
)

list(APPEND spdlog_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${spdlog_SOURCES})
add_library(spdlog STATIC)

if(spdlog_SOURCES)
	target_sources(spdlog PRIVATE ${spdlog_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${spdlog_SOURCES})

add_library(spdlog::spdlog ALIAS spdlog)
target_compile_definitions(spdlog PUBLIC
	SPDLOG_COMPILED_LIB
)

target_include_directories(spdlog PUBLIC
	"dependencies/submodules/spdlog/include"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target glm_static
set(CMKR_TARGET glm_static)
set(glm_static_SOURCES "")

list(APPEND glm_static_SOURCES
	"dependencies/submodules/glm/glm/detail/glm.cpp"
)

list(APPEND glm_static_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${glm_static_SOURCES})
add_library(glm_static STATIC)

if(glm_static_SOURCES)
	target_sources(glm_static PRIVATE ${glm_static_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${glm_static_SOURCES})

target_include_directories(glm_static PUBLIC
	"dependencies/submodules/glm"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target openvr
set(CMKR_TARGET openvr)
set(openvr_SOURCES "")

list(APPEND openvr_SOURCES
	"dependencies/openvr/src/jsoncpp.cpp"
	"dependencies/openvr/src/openvr_api_public.cpp"
	"dependencies/openvr/src/vrcommon/dirtools_public.cpp"
	"dependencies/openvr/src/vrcommon/envvartools_public.cpp"
	"dependencies/openvr/src/vrcommon/hmderrors_public.cpp"
	"dependencies/openvr/src/vrcommon/pathtools_public.cpp"
	"dependencies/openvr/src/vrcommon/sharedlibtools_public.cpp"
	"dependencies/openvr/src/vrcommon/strtools_public.cpp"
	"dependencies/openvr/src/vrcommon/vrpathregistry_public.cpp"
	"dependencies/openvr/src/vrcommon/dirtools_public.cpp"
	"dependencies/openvr/src/vrcommon/envvartools_public.cpp"
	"dependencies/openvr/src/vrcommon/hmderrors_public.cpp"
	"dependencies/openvr/src/vrcommon/pathtools_public.cpp"
	"dependencies/openvr/src/vrcommon/sharedlibtools_public.cpp"
	"dependencies/openvr/src/vrcommon/strtools_public.cpp"
	"dependencies/openvr/src/vrcommon/vrpathregistry_public.cpp"
)

list(APPEND openvr_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${openvr_SOURCES})
add_library(openvr SHARED)

if(openvr_SOURCES)
	target_sources(openvr PRIVATE ${openvr_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${openvr_SOURCES})

add_library(openvr_api ALIAS openvr)
target_compile_definitions(openvr PUBLIC
	VR_API_PUBLIC
	WIN64
)

target_include_directories(openvr PUBLIC
	"dependencies/openvr/headers"
)

set_target_properties(openvr PROPERTIES
	OUTPUT_NAME
		openvr_api
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target imgui
set(CMKR_TARGET imgui)
set(imgui_SOURCES "")

list(APPEND imgui_SOURCES
	"dependencies/submodules/imgui/imgui.cpp"
	"dependencies/submodules/imgui/imgui_demo.cpp"
	"dependencies/submodules/imgui/imgui_draw.cpp"
	"dependencies/submodules/imgui/imgui_tables.cpp"
	"dependencies/submodules/imgui/imgui_widgets.cpp"
)

list(APPEND imgui_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${imgui_SOURCES})
add_library(imgui STATIC)

if(imgui_SOURCES)
	target_sources(imgui PRIVATE ${imgui_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${imgui_SOURCES})

target_compile_definitions(imgui PUBLIC
	"IMGUI_USER_CONFIG=\"${CMAKE_CURRENT_SOURCE_DIR}/src/ue4poc-imgui/ue4poc_imconfig.hpp\""
)

target_include_directories(imgui PUBLIC
	"dependencies/submodules/imgui"
	"src/ue4poc-imgui"
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target sdk
set(CMKR_TARGET sdk)
set(sdk_SOURCES "")

list(APPEND sdk_SOURCES
	"shared/sdk/CVar.cpp"
	"shared/sdk/DynamicRHI.cpp"
	"shared/sdk/EngineModule.cpp"
	"shared/sdk/FViewportInfo.cpp"
	"shared/sdk/Slate.cpp"
	"shared/sdk/StereoStuff.cpp"
	"shared/sdk/UEngine.cpp"
	"shared/sdk/UGameEngine.cpp"
	"shared/sdk/CVar.hpp"
	"shared/sdk/DynamicRHI.hpp"
	"shared/sdk/EngineModule.hpp"
	"shared/sdk/FViewportInfo.hpp"
	"shared/sdk/Math.hpp"
	"shared/sdk/Slate.hpp"
	"shared/sdk/StereoStuff.hpp"
	"shared/sdk/UEngine.hpp"
	"shared/sdk/UGameEngine.hpp"
)

list(APPEND sdk_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${sdk_SOURCES})
add_library(sdk STATIC)

if(sdk_SOURCES)
	target_sources(sdk PRIVATE ${sdk_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${sdk_SOURCES})

target_compile_features(sdk PUBLIC
	cxx_std_20
)

target_compile_options(sdk PUBLIC
	"/EHa"
	"/MP"
)

target_include_directories(sdk PUBLIC
	"shared/"
)

target_link_libraries(sdk PUBLIC
	spdlog
	kananlib
	bddisasm
	bdshemu
	glm_static
	asmjit
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target plugin_renderlib
set(CMKR_TARGET plugin_renderlib)
set(plugin_renderlib_SOURCES "")

list(APPEND plugin_renderlib_SOURCES
	"examples/renderlib/imgui/imgui_impl_dx11.cpp"
	"examples/renderlib/imgui/imgui_impl_dx12.cpp"
	"examples/renderlib/imgui/imgui_impl_win32.cpp"
	"examples/renderlib/rendering/d3d11.cpp"
	"examples/renderlib/rendering/d3d12.cpp"
	"examples/renderlib/imgui/font_robotomedium.hpp"
	"examples/renderlib/imgui/re2_imconfig.hpp"
	"examples/renderlib/rendering/d3d11.hpp"
	"examples/renderlib/rendering/d3d12.hpp"
	"examples/renderlib/rendering/shared.hpp"
	"examples/renderlib/imgui/imgui_impl_dx11.h"
	"examples/renderlib/imgui/imgui_impl_dx12.h"
	"examples/renderlib/imgui/imgui_impl_win32.h"
)

list(APPEND plugin_renderlib_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${plugin_renderlib_SOURCES})
add_library(plugin_renderlib STATIC)

if(plugin_renderlib_SOURCES)
	target_sources(plugin_renderlib PRIVATE ${plugin_renderlib_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${plugin_renderlib_SOURCES})

target_compile_features(plugin_renderlib PUBLIC
	cxx_std_20
)

target_compile_options(plugin_renderlib PUBLIC
	"/EHa"
	"/MP"
)

target_include_directories(plugin_renderlib PUBLIC
	"examples/renderlib"
	"include/"
)

target_link_libraries(plugin_renderlib PUBLIC
	imgui
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target example_plugin
set(CMKR_TARGET example_plugin)
set(example_plugin_SOURCES "")

list(APPEND example_plugin_SOURCES
	"examples/example_plugin/Plugin.cpp"
)

list(APPEND example_plugin_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${example_plugin_SOURCES})
add_library(example_plugin SHARED)

if(example_plugin_SOURCES)
	target_sources(example_plugin PRIVATE ${example_plugin_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_plugin_SOURCES})

target_compile_features(example_plugin PUBLIC
	cxx_std_20
)

target_include_directories(example_plugin PUBLIC
	"include/"
	"examples/renderlib"
)

target_link_libraries(example_plugin PUBLIC
	plugin_renderlib
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target ue4poc
set(CMKR_TARGET ue4poc)
set(ue4poc_SOURCES "")

list(APPEND ue4poc_SOURCES
	"src/ExceptionHandler.cpp"
	"src/Framework.cpp"
	"src/Main.cpp"
	"src/Mods.cpp"
	"src/hooks/D3D11Hook.cpp"
	"src/hooks/D3D12Hook.cpp"
	"src/hooks/WindowsMessageHook.cpp"
	"src/mods/FrameworkConfig.cpp"
	"src/mods/PluginLoader.cpp"
	"src/mods/VR.cpp"
	"src/mods/vr/Bindings.cpp"
	"src/mods/vr/D3D11Component.cpp"
	"src/mods/vr/D3D12Component.cpp"
	"src/mods/vr/FFakeStereoRenderingHook.cpp"
	"src/mods/vr/OverlayComponent.cpp"
	"src/mods/vr/runtimes/OpenVR.cpp"
	"src/mods/vr/runtimes/OpenXR.cpp"
	"src/ue4poc-imgui/imgui_impl_dx11.cpp"
	"src/ue4poc-imgui/imgui_impl_dx12.cpp"
	"src/ue4poc-imgui/imgui_impl_win32.cpp"
	"src/ExceptionHandler.hpp"
	"src/Framework.hpp"
	"src/LicenseStrings.hpp"
	"src/Mod.hpp"
	"src/Mods.hpp"
	"src/hooks/D3D11Hook.hpp"
	"src/hooks/D3D12Hook.hpp"
	"src/hooks/WindowsMessageHook.hpp"
	"src/mods/FrameworkConfig.hpp"
	"src/mods/PluginLoader.hpp"
	"src/mods/VR.hpp"
	"src/mods/vr/D3D11Component.hpp"
	"src/mods/vr/D3D12Component.hpp"
	"src/mods/vr/FFakeStereoRenderingHook.hpp"
	"src/mods/vr/OverlayComponent.hpp"
	"src/mods/vr/runtimes/OpenVR.hpp"
	"src/mods/vr/runtimes/OpenXR.hpp"
	"src/mods/vr/runtimes/VRRuntime.hpp"
	"src/ue4poc-imgui/font_robotomedium.hpp"
	"src/ue4poc-imgui/ue4poc_imconfig.hpp"
	"src/ue4poc-imgui/imgui_impl_dx11.h"
	"src/ue4poc-imgui/imgui_impl_dx12.h"
	"src/ue4poc-imgui/imgui_impl_win32.h"
)

list(APPEND ue4poc_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${ue4poc_SOURCES})
add_library(ue4poc SHARED)

if(ue4poc_SOURCES)
	target_sources(ue4poc PRIVATE ${ue4poc_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${ue4poc_SOURCES})


target_compile_features(ue4poc PUBLIC
	cxx_std_20
)

target_compile_options(ue4poc PUBLIC
	"/GS-"
	"/bigobj"
	"/EHa"
	"/MP"
)

target_include_directories(ue4poc PUBLIC
	"shared/"
	"src/"
	"include/"
	"${OPENXR_SOURCE_DIR}/src"
)

target_link_libraries(ue4poc PUBLIC
	kananlib
	sdk
	shlwapi
	d3d11
	d3d12
	safetyhook
	glm_static
	imgui
	openvr_api
	openxr_loader
	nlohmann_json
)

set_target_properties(ue4poc PROPERTIES
	OUTPUT_NAME
		dinput8
	LINK_FLAGS
		"/DELAYLOAD:openvr_api.dll /DELAYLOAD:openxr_loader.dll"
	RUNTIME_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
	RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
	LIBRARY_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	ARCHIVE_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
)

add_custom_command(
    TARGET ue4poc POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:openvr> $<TARGET_FILE_DIR:ue4poc>)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

